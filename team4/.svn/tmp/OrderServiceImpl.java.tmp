package service;

import util.Utils;

public class OrderServiceImpl implements OrderService {
	//사용자가 결제 시 지불할 금액
	int cash = 0; 
	
	private static OrderService orderService = new OrderServiceImpl();
	public static OrderService getInstance() {
		return orderService;
	}
	private OrderServiceImpl() {}

	MemberService memberService = MemberServiceImpl.getInstance();
	ProductService productService = ProductServiceImpl.getInstance();
	
	Cart cart = Cart.getInstance();

	@Override
	public void order() {
		System.out.println(" === 장바구니 목록 ===");		
		cart.getPickList().forEach(System.out::println);

		//기존 회원의 경우 회원 번호와 보유 쿠폰 개수 출력, 
		//신규 회원의 경우 등록
		memberService.register();

		//쿠폰의 개수가 12개 이상 && 사용한다고 선택할 경우 cash에 2000원 추가
		if(memberService.getLoginUser().getCoupon() >= 12) {
			if(memberService.useCoupon()) {
				cash += 2000;
			}
			
		}
		
		//현금 입력받기
		getCash();
		
		//결제하기
		payProduct();

		//음료 개수 세기(쿠폰 발행 용도)
		System.out.println(countBeverage());
		
//		memberService.addCoupon();
	}
	
	//현금 입력 받기
	@Override
	public void getCash() {
		cash += Utils.nextInt("현금을 입력해주세요 > ");
	}
	
	//장바구니에 담긴 음료 개수를 리턴하는 메서드
	@Override
	public int countBeverage() {
		int count = 0;
		for (int i = 0; i < cart.getPickList().size(); i++) {
			if(cart.getPickList().get(i).getProCategory() <= 3) {
<<<<<<< .mine
				cnt += cart.getPickList().get(i).getCnt()+1;
||||||| .r150
=======
				System.out.println("cnt 값" +  cart.getPickList().get(i).getCnt());
				count += cart.getPickList().get(i).getCnt();
>>>>>>> .r154
			}
		}
<<<<<<< .mine
		return cnt;
||||||| .r150
=======
		System.out.println("count 값" + count);
		return count;
>>>>>>> .r154
	}

	//최종적으로 결제가 되는 메서드
	@Override
	public void payProduct() {
		if(cash < cart.totalPrice()) {
			System.out.println("금액이 부족합니다.");
			return;
		} else cash -= cart.totalPrice();

		//결제가 완료되면 pickList에 있는 모든 값 삭제
		cart.getPickList().clear();
		
		System.out.println("결제가 완료되었습니다.");
		System.out.println("남은 금액은 " + cash + "원 입니다.");
	}
	
	//지금까지 판매한 모든 상품의 합계(누적 값)
	@Override
	public int totalSales() {
		int sales = 0;
		sales += cart.totalPrice();
		return sales;
	}
}
