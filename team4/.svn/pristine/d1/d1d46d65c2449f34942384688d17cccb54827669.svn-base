package service;

import main.KioskMain;
import util.Utils;

public class OrderServiceImpl implements OrderService {
	
	/**
	 * @author 이지윤
	 * 
	 * 사용자가 결제 시 지불할 금액
	 */
	int cash = 0; 
	
	/**
	 * @author 이지윤
	 * 
	 * 지금까지 판매한 모든 상품의 합계(누적 값)
	 */
	int sales = 0;
	
	
	/**
	 * @author 이지윤
	 * 
	 * OrderService 싱글톤
	 */
	private static OrderService orderService = new OrderServiceImpl();
	public static OrderService getInstance() {
		return orderService;
	}
	private OrderServiceImpl() {}

	MemberService memberService = MemberServiceImpl.getInstance();
	ProductService productService = ProductServiceImpl.getInstance();
	Cart cart = Cart.getInstance();
	
	
	/**
	 * @author 이지윤
	 * 
	 * 주문 시 가장 먼저 실행
	 * - 장바구니 목록 && 총 금액 보여주기
	 * - 전화번호 입력받아 회원 조회 || 회원 등록
	 * - 결제
	 */
	@Override
	public void order() {
		System.out.println(" === 장바구니 목록 ===");		
//		cart.getPickList().forEach(System.out::println);
		cart.showList();
		System.out.println("총 금액 :" + cart.totalPrice() + "원");

		//기존 회원의 경우 회원 번호와 보유 쿠폰 개수 출력, 
		//신규 회원의 경우 등록
		memberService.register();

		//쿠폰의 개수가 12개 이상 && 사용한다고 선택할 경우 cash에 2000원 추가
		if(memberService.getLoginUser().getCoupon() >= 12) {
			if(memberService.useCoupon()) {
				cash += 2000;
				System.out.println("결제하실 금액은 " + (cart.totalPrice() - 2000) + "원입니다." );
			}
			else System.out.println("결제하실 금액은 " + cart.totalPrice() + "원입니다." );
		}
		else
			System.out.println("결제하실 금액은 " + cart.totalPrice() + "원입니다." );
		//현금 입력받기
		getCash();
		
		//음료 개수 세기(쿠폰 발행 용도)
		int temp = countBeverage();
		
		totalSales();

		if(payProduct()) 
			memberService.getLoginUser().setCoupon(memberService.getLoginUser().getCoupon() + temp);
		 else 
			System.out.println(memberService.getLoginUser().getTel() + "님이 보유 중인 쿠폰은 " + memberService.getLoginUser().getCoupon() + "개 입니다.");
	}
	
	/**
	 * @author 이지윤
	 * 
	 * 현금을 입력받아 cash에 저장하는 메서드
	 */
	@Override
	public void getCash() {
		cash += Utils.nextInt("현금을 입력해주세요 > ");
	}
	
	
	/**
	 * @author 이지윤
	 * 
	 * 장바구니에 담긴 음료 개수를 리턴하는 메서드
	 * 쿠폰 적립 시 사용
	 */
	@Override
	public int countBeverage() {
		int count = 0;
		for (int i = 0; i < cart.getPickList().size(); i++) {
			if(cart.getPickList().get(i).getProCategory() <= 3) {
				count += cart.getPickList().get(i).getCnt();
			}
		}
		return count;
	}

	/**
	 * @author 이지윤
	 * 
	 * 결제 가능한 금액인지 확인하여 결제 진행
	 * 결제 성공 시 true 반환
	 * 결제 실패 시 false 반환
	 */
	@Override
	public boolean payProduct() {
		if(cash < cart.totalPrice()) {
			System.out.println("금액이 부족합니다.");
			memberService.getLoginUser().setCoupon(memberService.getLoginUser().getCoupon() + 12);
			return false;
		}
		cart.totalPrice();
		cash -= cart.totalPrice();
		cart.getPickList().clear();
		System.out.println("결제가 완료되었습니다.");
		System.out.println("남은 금액은 " + cash + "원 입니다.");
		cart.setCnt();
		return true;
	}
	
	/**
	 * @author 이지윤
	 * 
	 * 지금까지 판매한 모든 상품의 합
	 * 누적하여 저장
	 */
	@Override
	public int totalSales() {
		sales += cart.totalPrice();
		return sales;
	}
}
