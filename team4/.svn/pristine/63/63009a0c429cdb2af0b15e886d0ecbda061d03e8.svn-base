package service;

import util.Utils;

public class OrderServiceImpl implements OrderService {
	//사용자가 결제 시 지불할 금액
	int cash = 0; 
	
	private static OrderService orderService = new OrderServiceImpl();
	public static OrderService getInstance() {
		return orderService;
	}
	private OrderServiceImpl() {}

	MemberService memberService = MemberServiceImpl.getInstance();
	ProductService productService = ProductServiceImpl.getInstance();
	
	Cart cart = Cart.getInstance();

	public static void main(String[] args) {
		OrderServiceImpl or = new OrderServiceImpl();
		or.countBeverage();
	}

	@Override
	public void order() {
		System.out.println(" === 장바구니 목록 ===");		
		cart.getPickList().forEach(System.out::println);
		
		memberService.register();

		//현금 입력받기
		getCash();

		
		//결제하기
		payProduct();

		
		countBeverage();
	}
	
	@Override
	public void getCash() {
		// TODO Auto-generated method stub
		cash = Utils.nextInt("현금을 입력해주세요 > ");
		
	}
	
	//쿠폰 사용에 따른 금액 차감 메서드
	int useCoupon() {
		int sum = 0;
		if(memberService.getLoginUser().getCoupon() < 12) {
			sum += cart.totalPrice();
			
		}
		if(memberService.useCoupon(countBeverage())) {
			sum -= 2000;//쿠폰 사용시 2000원 차감
		}
		return sum;
	}
	
	//장바구니에 담긴 음료 개수를 리턴하는 메서드
	@Override
	public int countBeverage() {
		int cnt = 0;
		for (int i = 0; i < cart.getPickList().size(); i++) {
			// findBy 하다.. null포인트 나서 ... 해결을하지 못하였음..니다
			if(cart.getPickList().get(i).getProCategory() <= 3) {
				cnt++;
			}
//			System.out.println(cnt);
		}
		
//		for (int i = 0; i < cart.getPickList().size(); i++) {
//			if(cart.getPickList().get(i).getProCategory() == 1 || 
//			   cart.getPickList().get(i).getProCategory() == 2 || 
//			   cart.getPickList().get(i).getProCategory() == 3) { 
//				cnt++;
//			}	
//		}
		return cnt;
	}

	//최종적으로 결제가 되는 메서드
	@Override
	public void payProduct() {
		// TODO Auto-generated method stub
		if(cash < cart.totalPrice()) {
			System.out.println("금액이 부족합니다.");
			
		}else {
		cash -= cart.totalPrice();
		
		//결제가 완료되면 pickList에 있는 모든 값 삭제
		for (int i = 0; i < cart.pickList.size(); i++) {
			cart.pickList.remove(i);
		}
		
		System.out.println("결제가 완료되었습니다.");
		System.out.println("남은 금액은 " + cash + "원 입니다.");
		}
		
	}
	
	//지금까지 판매한 모든 상품의 합계(누적 값)
	@Override
	public int totalSales() {
		int sales = 0;
		sales += cart.totalPrice();
		return sales;
	}
}
