package service;

import util.Utils;

public class OrderServiceImpl implements OrderService {
	//사용자가 결제 시 지불할 금액
	int cash = 0; 
	
	private static OrderService orderService = new OrderServiceImpl();
	public static OrderService getInstance() {
		return orderService;
	}
	private OrderServiceImpl() {}

	MemberService memberService = MemberServiceImpl.getInstance();
	ProductService productService = ProductServiceImpl.getInstance();
	
	Cart cart = Cart.getInstance();


	@Override
	public void order() {
		System.out.println(" === 장바구니 목록 ===");		
		cart.getPickList().forEach(System.out::println);
		
		//전화번호 입력받기
		getTel();

		//현금 입력받기
		getCash();
		
		//결제하기
		payProduct();
		
		minusStock();

	}

	@Override
	public void getTel() {
		memberService.findMember(Utils.nextLine("전화번호를 입력해주세요 > "));

	}
	
	@Override
	public void getCash() {
		// TODO Auto-generated method stub
		cash = Utils.nextInt("현금을 입력해주세요 > ");
		
	}
	
	//쿠폰 사용에 따른 금액 차감 함수
	int useCoupon() {
		int sum = totalPrice();
		if(memberService.useCoupon(countBeverage())) {
			sum -= 2000;//쿠폰 사용시 2000원 차감
		}
		return sum;
	}
	
	//상품의 총 합계를 구하는 함수
	@Override
	public int totalPrice() {
		int sum = 0;
		for (int i = 0; i < cart.getPickList().size(); i++) {
			sum += cart.getPickList().get(i).getProPrice();
		}
		return sum;
	}
	
	//장바구니에 담긴 음료 개수를 리턴하는 함수
	@Override
	public int countBeverage() {
		int cnt = 0;
		for (int i = 0; i < cart.getPickList().size(); i++) {
			if(cart.getPickList().get(i).getProCategory() == 1 ||
			   cart.getPickList().get(i).getProCategory() == 2 ||
			   cart.getPickList().get(i).getProCategory() == 3) {
				cnt++;
			}
		}
		return cnt;
	}

	@Override
	public void payProduct() {
		// TODO Auto-generated method stub
		if(cash < totalPrice()) {
			System.out.println("금액이 부족합니다.");
			return;
		}
		cash -= totalPrice();
		System.out.println("결제가 완료되었습니다.");
		System.out.println("남은 금액은 " + cash + " 입니다.");
		
	}

	@Override
	public void minusStock() {
		// TODO Auto-generated method stub
	}
	
	
	//지금까지 판매한 모든 상품의 합계(누적 값)
	@Override
	public int totalSales() {
		int sales = 0;
		sales += totalPrice();
		return sales;
	}
}

